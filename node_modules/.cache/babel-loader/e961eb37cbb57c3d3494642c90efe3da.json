{"ast":null,"code":"var _jsxFileName = \"/Users/cliff/GIT/privacy-and-terms.cliff-crerar.tech/src/components/Render-Markdown/Render-Markdown.tsx\";\nimport React, { useEffect, useState } from 'react'; // import {MarkItDown} from '../mark-it-down'\n\nimport MarkdownIt from 'markdown-it';\n// import error = Simulate.error;\nconst markItDown = new MarkdownIt();\nlet fetched = false;\nconsole.log('init', fetched);\nexport default function RenderMarkdown({\n  markdownFile\n}) {\n  let mdContainer;\n  const [renderedMd, updatedHttpCall] = useState('');\n  useEffect(() => {\n    if (!fetched) {\n      let responseBody = '';\n      fetched = true;\n      mdContainer = document.getElementById('md-container');\n      fetch(`/${markdownFile}.md`).then(response => response.text().then(body => {\n        responseBody = body;\n        console.log('feetch');\n      })).catch(httpError => console.error(httpError.message)).finally(() => {\n        Promise.resolve(markItDown.render(responseBody)).then(returnVal => {\n          console.log(returnVal);\n          updatedHttpCall(returnVal);\n          mdContainer.innerHtml = renderedMd; // Promise.resolve(updatedHttpCall(returnVal)).then(()=>{\n          //     setTimeout(()=>renderMarkdownAndStyle(),1000);\n          // });\n        }).catch(renderError => console.error(renderError.message));\n      });\n    }\n  });\n\n  function renderMarkdownAndStyle() {\n    console.log(renderedMd); // console.log(markdownString);\n    // const mdHtml = markItDown.render(markdownString);\n    // console.log(mdHtml);\n    // updatedHttpCall()\n    // console.log(mdContainer);\n    // mdContainer.innerHtml = mdHtml;\n  }\n\n  function ionItemHeading() {// console.log(el);\n    // const text = el.innerText;\n    // React.createElement()\n    // console.log(text);\n    // render(<div/>, document.getElementById('heading'));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"md-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  });\n}","map":{"version":3,"sources":["/Users/cliff/GIT/privacy-and-terms.cliff-crerar.tech/src/components/Render-Markdown/Render-Markdown.tsx"],"names":["React","useEffect","useState","MarkdownIt","markItDown","fetched","console","log","RenderMarkdown","markdownFile","mdContainer","renderedMd","updatedHttpCall","responseBody","document","getElementById","fetch","then","response","text","body","catch","httpError","error","message","finally","Promise","resolve","render","returnVal","innerHtml","renderError","renderMarkdownAndStyle","ionItemHeading"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC,C,CACA;;AAGA,OAAOC,UAAP,MAAuB,aAAvB;AAEA;AAEA,MAAMC,UAAsB,GAAG,IAAID,UAAJ,EAA/B;AAIA,IAAIE,OAAO,GAAG,KAAd;AACAC,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,OAApB;AAEA,eAAe,SAASG,cAAT,CAAwB;AAACC,EAAAA;AAAD,CAAxB,EAA+C;AAC1D,MAAIC,WAAJ;AACA,QAAM,CAACC,UAAD,EAAaC,eAAb,IAAgCV,QAAQ,CAAC,EAAD,CAA9C;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACI,OAAL,EAAc;AACV,UAAIQ,YAAY,GAAG,EAAnB;AACAR,MAAAA,OAAO,GAAG,IAAV;AACAK,MAAAA,WAAW,GAAGI,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAd;AACAC,MAAAA,KAAK,CAAE,IAAGP,YAAa,KAAlB,CAAL,CAA6BQ,IAA7B,CAAkCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqBG,IAAI,IAAI;AACvEP,QAAAA,YAAY,GAAGO,IAAf;AACAd,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH,OAH6C,CAA9C,EAGIc,KAHJ,CAGUC,SAAS,IAAIhB,OAAO,CAACiB,KAAR,CAAcD,SAAS,CAACE,OAAxB,CAHvB,EAIKC,OAJL,CAIa,MAAM;AACXC,QAAAA,OAAO,CAACC,OAAR,CAAgBvB,UAAU,CAACwB,MAAX,CAAkBf,YAAlB,CAAhB,EAAiDI,IAAjD,CAAsDY,SAAS,IAAI;AAC/DvB,UAAAA,OAAO,CAACC,GAAR,CAAYsB,SAAZ;AACAjB,UAAAA,eAAe,CAACiB,SAAD,CAAf;AACAnB,UAAAA,WAAW,CAACoB,SAAZ,GAAwBnB,UAAxB,CAH+D,CAK/D;AACA;AACA;AACH,SARD,EAQGU,KARH,CAQSU,WAAW,IAAEzB,OAAO,CAACiB,KAAR,CAAcQ,WAAW,CAACP,OAA1B,CARtB;AASH,OAdL;AAeH;AACJ,GArBQ,CAAT;;AAwBA,WAASQ,sBAAT,GAAkC;AAC9B1B,IAAAA,OAAO,CAACC,GAAR,CAAYI,UAAZ,EAD8B,CAE9B;AACA;AACA;AACA;AACA;AACA;AAEH;;AAED,WAASsB,cAAT,GAA0B,CACtB;AACA;AAEA;AACA;AAEA;AAEH;;AAED,sBAAQ;AAAK,IAAA,EAAE,EAAC,cAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR;AACH","sourcesContent":["import React, {useEffect, useState} from 'react';\n// import {MarkItDown} from '../mark-it-down'\nimport {render} from \"react-dom\";\nimport {IonItem} from '@ionic/react';\nimport MarkdownIt from 'markdown-it';\nimport {Simulate} from \"react-dom/test-utils\";\n// import error = Simulate.error;\n\nconst markItDown: MarkdownIt = new MarkdownIt();\n\ntype Props = { markdownFile: string };\n\nlet fetched = false;\nconsole.log('init', fetched)\n\nexport default function RenderMarkdown({markdownFile}: Props) {\n    let mdContainer: any;\n    const [renderedMd, updatedHttpCall] = useState('');\n    useEffect(() => {\n        if (!fetched) {\n            let responseBody = '';\n            fetched = true;\n            mdContainer = document.getElementById('md-container');\n            fetch(`/${markdownFile}.md`).then(response => response.text().then(body => {\n                responseBody = body;\n                console.log('feetch');\n            })).catch(httpError => console.error(httpError.message))\n                .finally(() => {\n                    Promise.resolve(markItDown.render(responseBody)).then(returnVal => {\n                        console.log(returnVal);\n                        updatedHttpCall(returnVal)\n                        mdContainer.innerHtml = renderedMd;\n\n                        // Promise.resolve(updatedHttpCall(returnVal)).then(()=>{\n                        //     setTimeout(()=>renderMarkdownAndStyle(),1000);\n                        // });\n                    }).catch(renderError=>console.error(renderError.message));\n                })\n        }\n    })\n\n\n    function renderMarkdownAndStyle() {\n        console.log(renderedMd);\n        // console.log(markdownString);\n        // const mdHtml = markItDown.render(markdownString);\n        // console.log(mdHtml);\n        // updatedHttpCall()\n        // console.log(mdContainer);\n        // mdContainer.innerHtml = mdHtml;\n\n    }\n\n    function ionItemHeading() {\n        // console.log(el);\n        // const text = el.innerText;\n\n        // React.createElement()\n        // console.log(text);\n\n        // render(<div/>, document.getElementById('heading'));\n\n    }\n\n    return (<div id=\"md-container\"></div>);\n}\n"]},"metadata":{},"sourceType":"module"}